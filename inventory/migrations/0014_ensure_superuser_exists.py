# Generated by Django 5.1.6 on 2025-03-18 16:46

from django.db import migrations
from django.contrib.auth.hashers import make_password

def ensure_superuser_exists(apps, schema_editor):
    """
    This migration ensures that at least one superuser always exists.
    Rather than enforcing a specific username, it checks if ANY superuser exists
    and creates a backup one only if none exist.
    """
    User = apps.get_model('auth', 'User')
    
    # Check if any superuser exists at all
    if not User.objects.filter(is_superuser=True).exists():
        # No superuser exists, create a backup one with a different name
        # to avoid conflicts with previous migrations
        backup_user = User.objects.create(
            username='system_admin',
            email='system_admin@uniform-inventory.example.com',
            password=make_password('UniformSystem2025!'),  # Strong password
            is_staff=True,
            is_superuser=True,
            is_active=True
        )
        print("Created backup superuser 'system_admin' as no superusers existed")

class Migration(migrations.Migration):

    dependencies = [
        ('inventory', '0013_remove_hardcoded_superuser'),
    ]

    operations = [
        migrations.RunPython(ensure_superuser_exists),
    ]
